// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  COMPLETED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  returns   Return[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Decimal     @db.Decimal(10, 2)
  category    String
  brand       String
  images      String[]
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  inventory   Inventory?
  orderItems  OrderItem[]
}

model Inventory {
  id           String   @id @default(cuid())
  productId    String   @unique
  quantity     Int
  minThreshold Int
  lastUpdated  DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id              String       @id @default(cuid())
  userId          String
  status          OrderStatus  @default(PENDING)
  totalAmount     Decimal      @db.Decimal(10, 2)
  shippingAddress Json
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]
  returns         Return[]

  @@index([userId])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
}

model Return {
  id           String        @id @default(cuid())
  orderId      String
  userId       String
  reason       String
  status       ReturnStatus  @default(REQUESTED)
  refundAmount Decimal       @db.Decimal(10, 2)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([userId])
}
